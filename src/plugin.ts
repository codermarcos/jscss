import type { Compiler } from 'webpack';

type JSCSSPluginOptions = {
  inline: boolean;
  file: string;
}

const PLUGIN_NAME = 'jscss-webpack-plugin';

export class JSCSSPlugin {
  public definitions: JSCSSPluginOptions;

  constructor(definitions: Partial<JSCSSPluginOptions> & Pick<JSCSSPluginOptions, 'file'>) {
    const options: JSCSSPluginOptions = {
      file: definitions.file,
      inline: true,
    };

    Object.assign(options, definitions);

    this.definitions = options;
  }

  apply(compiler: Compiler) {
    compiler.hooks.emit.tapAsync(
      PLUGIN_NAME,
      (compilation, callback) => {
        const content = '/* generated by jscss */';
        let chunks = Array.from(compilation.chunks);
        
        console.log(compilation.emittedAssets);
        // console.log(chunks);
        // console.log(compilation.assets);
        compilation.chunks.forEach((chunk) => {
          // Explore each asset filename generated by the chunk:
          chunk.files.forEach((filename) => {
            // Get the asset source for each file generated by the chunk:
            var source = compilation.assets[filename].source();
            console.log('filename', filename);
          });  
        });

        if (!this.definitions.inline)
          compilation.assets['style.css'] = new compiler.webpack.sources.RawSource(content);

        callback();
      }
    );
  }
}
